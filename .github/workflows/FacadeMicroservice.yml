name: Facade-test-and-deploy
env:
  SERVER: "84.38.185.78"
  PORT: "22"
  USER: "root"
  MICROSERVICE_NAME: "Facade"
  MICROSERVICE_TAG: "facade"
  DOCKERFILE: "facade_dockerfile"
  TEST_WORK_DIR: "Facade/Facade/Facade.Web"
  
  
on:
  push:
    paths: 
      - "Facade/**"
      - ".github/workflows/Facade.yaml"

jobs:
  build-and-test-app:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      working-directory: ${{ env.TEST_WORK_DIR }}
      run: dotnet restore
    - name: Build
      working-directory: ${{ env.TEST_WORK_DIR }}
      run: dotnet build --no-restore
    - name: Test
      working-directory: ${{ env.TEST_WORK_DIR }}
      run: dotnet test --no-build --verbosity normal
      
  build:
    runs-on: ubuntu-latest
    needs: build-and-test-app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.MICROSERVICE_NAME }}/${{ env.DOCKERFILE }}
          tags: ${{ env.MICROSERVICE_TAG }}:${{ github.sha }}
          outputs: type=docker,dest=/tmp/${{ env.MICROSERVICE_TAG }}.tar
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MICROSERVICE_TAG }}.tar
          path: /tmp/${{ env.MICROSERVICE_TAG }}.tar

  Deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Adding Known Hosts
        run: ssh-keyscan -p ${{ env.PORT }} -H ${{ env.SERVER }} >> ~/.ssh/known_hosts
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: /tmp
      
      - uses: actions/checkout@v2
      
      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2.5.0
        with:
          playbook: ansiblefiles/facade_playbook.yaml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: | 
            -vv
            --inventory ansiblefiles/hosts.ini
            -e "microservice_name_image=${{ env.MICROSERVICE_TAG }} sha=${{ github.sha }} dockerfile=${{ env.DOCKERFILE }} microservice_name=${{ env.MICROSERVICE_NAME }}"
       
      
